{"version":3,"sources":["border.gif","20200502_150631.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","src","logo2","logo4","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8EAAAA,EAAOC,QAAU,IAA0B,oC,kBCA3CD,EAAOC,QAAU,IAA0B,6C,+LC+F5BC,MAzFf,WACE,OACE,yBAAKC,UAAU,OACb,4BACE,uBAAGA,UAAU,cAAb,wCADF,IACuC,uBAAGA,UAAU,QAAb,oBADvC,IACgF,uBAAGA,UAAU,cAAb,yCAEhF,4BACE,uBAAGA,UAAU,SAAb,qBACA,8BAEF,wBAAIA,UAAU,OAAd,SACA,yBAAKA,UAAU,cAAcC,IAAKC,MAGlC,uBAAGF,UAAU,SAAb,yCAIA,yBAAKA,UAAU,WAEb,uBAAGA,UAAU,SAAb,8DAC6D,6BAD7D,wDAEuD,6BAFvD,wCAMA,wBAAIA,UAAU,OAAd,YAEA,uBAAGA,UAAU,gBAAb,oBACmB,6BADnB,qCAEsC,6BAFtC,aAGc,6BAHd,+BAIgC,6BAJhC,UAKW,6BALX,iBAMkB,6BANlB,mBAOoB,6BAPpB,qBAQsB,6BARtB,mBASoB,6BATpB,0FAcA,wBAAIA,UAAU,OAAd,aACA,yBAAKC,IAAKE,IAAOH,UAAU,SAC3B,yBAAKC,IAAKE,IAAOH,UAAU,SAC3B,yBAAKC,IAAKE,IAAOH,UAAU,SAC3B,6BACA,6BACA,6BACA,uBAAGA,UAAU,SAAb,oFACmF,6BADnF,8DAKA,uBAAGA,UAAU,SAAb,yFACwF,6BADxF,oGAKA,wBAAIA,UAAU,OAAd,kBACA,uBAAGA,UAAU,SACX,wDAEF,uBAAGA,UAAU,SACX,kFAEF,uBAAGA,UAAU,SACX,6FAEF,uBAAGA,UAAU,SACX,kEAEF,uBAAGA,UAAU,SACX,4DAMJ,6BACA,6BACA,6BACA,6BACA,6BACA,uBAAGA,UAAU,SAAb,mBC9EcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b919a39b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/border.0abf54e5.gif\";","module.exports = __webpack_public_path__ + \"static/media/20200502_150631.4ea3d4a2.jpg\";","import React from 'react';\nimport './App.css';\n\nimport logo2 from './20200502_150631.jpg'; // Tell webpack this JS file uses this image\nimport logo4 from './border.gif'; // Tell webpack this JS file uses this image\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>\n        <a className=\"love-label\">✫✫✫✫✫✫</a> <a className=\"Name\">Hayden Wiltshire</a> <a className=\"love-label\">✫✫✫✫✫✫</a>\n      </h1>\n      <h2>\n        <a className=\"Title\">software engineer</a>\n        <br />\n      </h2>\n      <h2 className=\"Sub\"> Bio </h2>\n      <img className=\"profile-img\" src={logo2} />\n\n\n      <p className=\"About\">\n        [Me catchin birds while piloting one]\n </p>\n\n      <div className=\"Content\">\n\n        <p className=\"About\">\n          I have been developing for over 10 years. During that time <br />\n          I have worked heavily on event driven architectures, <br />\n         .net, Azure and chasing the postman.\n         </p>\n\n        <h2 className=\"Sub\"> Skills </h2>\n\n        <p className=\"About skills\">\n          | C#/Kotlin/TS | <br />\n            | RabbitMQ/Azure Service Bus/JMS |<br />\n            | Azure | <br />\n            | Hiding bones in backyard |<br />\n            | GCP |<br />\n            | SQL Server |<br />\n            | Chasing Cars |<br />\n            | Angular/React | <br />\n            | Fighting cat |<br />\n            | Chasing squirrels up trees |\n            | Not sitting when I am told |\n            | Chewing on couch leg |\n        </p>\n        <h2 className=\"Sub\"> Hobbies </h2>\n        <img src={logo4} className=\"waff\" />\n        <img src={logo4} className=\"waff\" />\n        <img src={logo4} className=\"waff\" />\n        <br />\n        <br />\n        <br />\n        <p className=\"About\">\n          I am nationally ranked power eating champion. In 2016 I won the South Australian <br />\n          \"King of the Waffles\" power eating event for the 3rd time.\n         </p>\n\n        <p className=\"About\">\n          Most nights I enjoy barking into darkness. The sound of my own bark is very pleasing. <br />\n          Apart from that a good dragging of the ass across the nice carpets for no reason is also hobbie.\n         </p>\n\n        <h2 className=\"Sub\"> Testimonials </h2>\n        <p className=\"About\">\n          <i> \"Very good boy\" - Mum  </i>\n        </p>\n        <p className=\"About\">\n          <i> \"Loudest bark in neighbourhood\" - Guy Next Door  </i>\n        </p>\n        <p className=\"About\">\n          <i> \"If he eats any faster he is going to choke\" - Mum (again)  </i>\n        </p>\n        <p className=\"About\">\n          <i> \"Done eat your own vomit\" - Dad  </i>\n        </p>\n        <p className=\"About\">\n          <i> \"Bark\" - Pug at dog park  </i>\n        </p>\n\n      </div>\n\n\n      <br />\n      <br />\n      <br />\n      <br />\n      <br />\n      <p className=\"About\"> Ⓒ 1997 </p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}